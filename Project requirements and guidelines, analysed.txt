=============
REQUIREMENTS:
=============

The program should display all of the items and their respective prices when the program starts, along with an option to exit the program.
-Needs to display: output to console.

The user must put in some amount of money before an item can be selected.
-Don't need many options at start, just input money and exit.

Only one item can be vended at a time.
-Makes it easy, once money is input just ask what you want.

If the user selects an item that costs more than the amount the user put into the vending machine, the program should display a message indicating insufficient funds and then redisplay the amount the user had put into the machine.
-Do checks on selection, report if they fail, return to asking what they want.

If the user selects an item that costs equal to or less than the amount of money that the user put in the vending machine, the program should display the change returned to the user. Change must be displayed as the number of quarters, dimes, nickels, and pennies returned to the user.
-Loop that counts up change, subtracts each currency in descending order until value reaches 0. Use ints to avoid floating point errors.
 -Can ignore vending machine not having enough change, not part of spec, but would be added here if needed.

Vending machine items must be stored in a file. Inventory for the vending machine must be read from this file when the program starts and must be written out to this file just before the program exits. The program must track the following properties for each item: Item name, Item cost, Number of items in inventory
-Data marshalling and unmarshalling, only need to update stock values since there's no function to edit any other values.

When an item is vended, the program must update the inventory level appropriately. If the machine runs out of an item, it should no longer be available as an option to the user. However, the items that have an inventory level of zero must still be read from and written to the inventory file and stored in memory.
-Put checks on list displays to ensure stock > 0, but don't put the same check on DAO.

===========
GUIDELINES:
===========

You should take considerable time to design this application before you even think about writing code. Follow the Service Layer and DAO interface design approaches shown in the write-ups and videos.
-Done.

This application must follow the MVC pattern used for all previous labs (App class, Controller, View, Service Layer, DAO) â€“ this includes the use of constructor-based dependency injection.
-Easy: app, controller, ui, service, dao, dto, etc.

You must have a full set of unit tests for your DAO and Service Layer components.
-Only for DAO and service layer - don't bother on controller or UI, presumably.

You must use BigDecimal for all monetary calculations where applicable.
-This really sucks. It makes sense for reliability, but will add complexity. Take care to remember.

You must include at least one lambda function in the solution.
-Probably best implemented on stock listing in ui.

You must use application-specific exceptions and your application must fail gracefully under all conditions (i.e. no displaying a stack trace when an exception is thrown). At a minimum you should have the following application-specific exceptions thrown by your Service Layer: One that is thrown when the user tries to purchase an item but doesn't deposit enough money (i.e. InsufficientFundsException), and one that is thrown when the user tries to purchase an item that has zero inventory (i.e. NoItemInventoryException)
-No problem, that's pretty much what I've been doing anyway. Remember to formalise the exceptions for UI's sake.

Use enums to represent the values of different coins.
-Yeah, if you insist. Might not be the least cumbersome solution but will help meet the marking critera, and might be more readable if done right.

Include an Audit DAO to log events and the time they occurred.
-Simple, doesn't need to read files, just write out a new log with a date timestamp in the title that reports any errors. Keep this in mind when designing error throws 2 points up.